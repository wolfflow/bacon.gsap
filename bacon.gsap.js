// Generated by CoffeeScript 1.6.3
(function() {
  var $, Bacon, init,
    __slice = [].slice;

  init = function(Bacon, $) {
    var Tween, globals, makeEventStream, _addCallback, _capitalize;
    globals = window.GreenSockGlobals || window;
    Tween = globals.TweenMax || globals.TweenLite;
    _capitalize = function(s) {
      return s.slice(0, 1).toUpperCase() + s.slice(1);
    };
    _addCallback = function(type, func, obj, vars) {
      if (func == null) {
        func = (function() {});
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      vars[type] = obj.each || obj.forEach;
      vars[type + "Scope"] = obj;
      vars[type + "Params"] = [func];
    };
    makeEventStream = function(obj, interval, vars, direction, eventTransformer) {
      if (direction == null) {
        direction = "to";
      }
      if (eventTransformer == null) {
        eventTransformer = Bacon._.id;
      }
      return new Bacon.EventStream(function(sink) {
        var handleComplete, handleUpdate, unbind;
        handleUpdate = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          sink(new Bacon.Next(eventTransformer.apply(null, args)));
        };
        handleComplete = function() {
          sink(new Bacon.End());
        };
        unbind = function() {
          Tween.killTweensOf(obj);
        };
        _addCallback("onUpdate", handleUpdate, obj, vars);
        _addCallback("onComplete", handleComplete, obj, vars);
        Tween[direction](obj, interval, vars);
        return unbind;
      });
    };
    Tween.EventStreamTo = function(obj, interval, vars, eventTransformer) {
      if (eventTransformer == null) {
        eventTransformer = Bacon._.id;
      }
      return makeEventStream(obj, interval, vars, "to", eventTransformer);
    };
    Tween.EventStreamFrom = function(obj, interval, vars, eventTransformer) {
      if (eventTransformer == null) {
        eventTransformer = Bacon._.id;
      }
      return makeEventStream(obj, interval, vars, "from", eventTransformer);
    };
    return Tween.prototype.asEventStream = function(eventName, eventTransformer) {
      var _this = this;
      if (eventTransformer == null) {
        eventTransformer = Bacon._.id;
      }
      this.pause();
      return new Bacon.EventStream(function(sink) {
        var handler, unbind;
        handler = function() {
          var args, reply;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          reply = sink(new Bacon.Next(eventTransformer.apply(null, args)));
          if (reply === Bacon.noMore) {
            return unbind();
          }
        };
        unbind = function() {
          return Tween.killTweensOf(_this.target);
        };
        _addCallback("on" + _capitalize(eventName), handler, _this.target, _this.vars);
        return unbind;
      });
    };
  };

  if (typeof module !== "undefined" && module !== null) {
    Bacon = require("baconjs");
    $ = require("jquery");
    module.exports = init(Bacon, $);
  } else {
    if (typeof define === "function" && define.amd) {
      define(["bacon", "jquery"], init);
    } else {
      init(this.Bacon, this.$);
    }
  }

}).call(this);
